#!/bin/bash

source log.sh

############ INSTALL FUNCTIONS
erun() {
    all="$@"
    info "Running: $all"
    ${@} || die "Error running ${@}"
}


exists() {
    hash $1 2>/dev/null
}

# cache files not tracked in this repo
cache() {
    mkdir -p offline
    if [[ ! -f "offline/$(basename $1)" ]]; then
        info "Downloading $1..."
        if exists curl; then
            (cd offline && curl -sSfLO "$1" || die "Error downloading $1")
        elif exists wget; then
            (cd offline && wget -nv "$1" || die "Error downloading $1")
        else
            die "curl and wget not installed"
        fi
    fi
}
gitclone() {
    if exists git; then
        (cd offline && git clone --quiet --depth 1 "$1" || die "Error downloading $1")
    else
        die "git not installed"
    fi
}
gitupdate() {
    if exists git; then
        (cd offline/"$1" && git pull || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
hgclone() {
    if exists hg; then
        (cd offline && hg clone "$1" || die "Error downloading $1")
    else
        die "hg not installed"
    fi
}
hgupdate() {
    if exists hg; then
        (cd offline/"$1" && hg pull -u || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
clone() {
    mkdir -p offline
    if [[ ! -e "offline/$(basename $1)" ]]; then
        info "Cloning $1..."
        if [[ $1 =~ github ]]; then
            gitclone "$1"
        elif [[ $1 =~ bitbucket ]]; then
            hgclone "$1"
        else
            die "Don't know how to clone $1"
        fi
    else
        if [[ $UPDATE -eq 1 ]]; then
            info "Updating $1..."
            if [[ $1 =~ github ]]; then
                gitupdate $(basename "$1")
            elif [[ $1 =~ bitbucket ]]; then
                hgupdate $(basename "$1")
            else
                die "Don't know how to update $1"
            fi
        fi
    fi
}

# backup file if exists by moving it out of the way
backup_clear() {
    if [[ -L $INSTALL_PATH ]]; then
        # Just remove existing symbolic link
        #info "Removing existing symbolic link"
        rm "$INSTALL_PATH" || die "Could not remove $INSTALL_PATH"
    else
        # Backup only if the existing file is not a symbolic link
        if [[ -e $INSTALL_PATH ]]; then
            info "Backing up $INSTALL_PATH"
            mv "$INSTALL_PATH" "$dotfiles/backup" || die "Could not backup existing $INSTALL_PATH"
        fi
    fi
}

link() {
    ln -sf "$SOURCE_PATH" "$INSTALL_PATH" || die "Error linking $INSTALL_PATH"
}

linkdot() {
    # Add the dot and remove everything before last slash (basename)
    INSTALL_DIR="${2:-$HOME}"
    INSTALL_PATH="$INSTALL_DIR/.${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    mkdir -p "$INSTALL_DIR"
    backup_clear
    link
}

# linkconfig vim/init.vim nvim
linkconfig() {
    # Add the dot and remove everything before last slash (basename)
    CONFIG_DIR="$HOME/.config/$2"
    INSTALL_PATH="$CONFIG_DIR/${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    mkdir -p "$CONFIG_DIR"
    backup_clear
    link
}

linkcustom() {
    # Add the dot and remove everything before last slash (basename)
    SOURCE_PATH="$dotfiles/$1"
    INSTALL_PATH="$2"
    mkdir -p "$(dirname $INSTALL_PATH)"
    backup_clear
    link
}

linkall() {
    SRC="$dotfiles/$1"
    DEST="$2"

    # Make all directories
    pushd .
    cd "$SRC"
    find * -type d -exec mkdir -p "{}" \;

    while IFS= read -r -d $'\0' FILE; do
        {
            INSTALL_PATH="${DEST}/${FILE}"
            SOURCE_PATH="${SRC}/${FILE}"
            backup_clear
            link
        } < /dev/null
    done < <(find * -type f -print0)

    popd
}

linkbin() {
    mkdir -p "$HOME/bin"
    # Remove everything before last slash
    INSTALL_PATH="${2:-$HOME/bin}/${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    backup_clear
    link
}

linknnnplugin() {
    PLUGIN_PATH="$HOME/.config/nnn/plugins"
    mkdir -p "$PLUGIN_PATH"

    INSTALL_PATH="$PLUGIN_PATH/$1"
    SOURCE_PATH="$dotfiles/nnn/$1"
    backup_clear
    link
}

prompt_install() {
    echo -n $1
    read answer
    if [[ $answer =~ [yY] ]]; then
        $2
    fi
}

disable_etc_vimrc() {
    # fixes escape character delay in vim
    # Not a problem in ventura (probably earlier)
    sudo mv /etc/vimrc /etc/vimrc.disabled || die "Error disabling system vimrc"
}

install_rst() {
    # This won't be handled above because .rst2pdf and .rst2html are folders
    info "Installing reStructuredText settings"
    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2pdf
    fi
    if [[ -f ~/.rst2pdf ]]; then
        # This may be a folder we need to backup
        mv ~/.rst2pdf "$dotfiles/backup/"
    fi
    erun ln -s $dotfiles/.rst2pdf ~/.rst2pdf

    if [[ -h ~/.rst2html ]]; then
        rm -f ~/.rst2html
    fi
    if [[ -f ~/.rst2html ]]; then
        # This may be a folder we need to backup
        mv ~/.rst2html "$dotfiles/backup/"
    fi
    erun ln -s $dotfiles/.rst2html ~/.rst2html
}


######################## MAIN

cd "${0%/*}"
dotfiles="$(pwd)" # Location of this dotfiles folder
mkdir -p "$dotfiles/backup"

DOWNLOAD_ONLY=0
UPDATE=0
while getopts "rou" opt; do
  case $opt in
    r)
      rm -rf offline
      ;;
    o)
      DOWNLOAD_ONLY=1
      ;;
    u)
      UPDATE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

info "Downloading files not tracked in this repo"

cache https://raw.githubusercontent.com/cskeeters/tabsplice/master/tabsplice
chmod a+x offline/tabsplice

cache https://raw.githubusercontent.com/cskeeters/myvim/master/myvim
chmod a+x offline/myvim


clone https://github.com/chriskempson/base16-shell
clone https://github.com/powerline/fonts

if [[ $DOWNLOAD_ONLY -eq 1 ]]; then
    echo "Finished Downloading.  Exiting"
    exit 0
fi

info "Installing settings files"
linkdot shell/fzf.sh
linkdot shell/bashrc
linkdot shell/bash_profile
linkdot shell/bash_prompt
linkdot shell/completions
linkdot shell/inputrc
linkdot shell/dir_colors

linkdot X11/xinitrc
linkdot X11/Xmodmap
linkdot X11/Xresources # xterm/rxvt color settings

linkdot git/gitconfig
linkdot git/gitignore

linkdot hg/hgrc
linkdot hg/hg_log_style

linkdot vim/gvimrc
linkdot vim/vimrc
linkcustom nvim ~/.config/nvim

linkconfig bat/config bat

linkconfig ranger/rc.conf ranger
linkconfig ranger/commands.py ranger

linkdot doc/docutils

linkdot ctags
linkdot tmux.conf

linkbin offline/tabsplice
linkbin offline/myvim

linknnnplugin acrobatpro
linknnnplugin addjump
linknnnplugin fzjump
linknnnplugin fzcd
linknnnplugin openfolder
linknnnplugin vim

# Hammerspoon / Movie
linkcustom hammerspoon/init.lua ~/.hammerspoon/init.lua
linkcustom hammerspoon/MoveIt/init.lua ~/.hammerspoon/Spoons/MoveIt.spoon/init.lua

install_rst

if [[ -f /etc/vimrc ]]; then
    prompt_install "Disable /etc/vimrc? ->" disable_etc_vimrc
fi

info "Setting up Keyboard bindings to support ^w -> deleteWordBackward:"
mkdir -p ~/Library/KeyBindings
cp $dotfiles/DefaultKeyBinding.dict ~/Library/KeyBindings/DefaultKeyBinding.dict

info "Setup iterm settings"
plutil -convert binary1 $dotfiles/iterm2.xml -o ~/Library/Preferences/com.googlecode.iterm2.plist

# This will safe the iTerm preferences into an XML files
#   plutil -convert xml1 ~/Library/Preferences/com.googlecode.iterm2.plist -o $dotfiles/iterm2.xml
