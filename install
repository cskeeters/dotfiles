#!/bin/bash

############ LOG FUNCTIONS
show() {
    if [[ -t 1 ]]; then
        # Coloring is ok
        printf -- "\x1b[$2m$1\x1b[m\n"
    else
        printf -- "$1\n"
    fi
}

error() { show "ERROR: $1" 31; } # 31 is red
warn()  { show "WARN: $1" 33; }  # 33 is yellow
info()  { show "INFO: $1" 34; }  # 34 is blue
# Outputs the first parameter and terminates with exit 1
die() {
    error "$1"
    exit 1
}


############ INSTALL FUNCTIONS
erun() {
  echo "Running: ${@}"
  ${@} || die "Error running ${@}"
}


exists() {
    hash $1 2>/dev/null
}

# cache files not tracked in this repo
cache() {
    mkdir -p offline
    if [[ ! -f "offline/$(basename $1)" ]]; then
        echo "Downloading $1..."
        if exists curl; then
            (cd offline && curl -sSfLO "$1" || die "Error downloading $1")
        elif exists wget; then
            (cd offline && wget -nv "$1" || die "Error downloading $1")
        else
            die "curl and wget not installed"
        fi
    fi
}
clone() {
    mkdir -p offline
    if [[ ! -e "offline/$(basename $1)" ]]; then
        echo "Cloning $1..."
        if exists git; then
            (cd offline && git clone --quiet "$1" || die "Error downloading $1")
        else
            die "curl and wget not installed"
        fi
    fi
}

# Create symbolic link to dotfile
# ${var##*/} === basename $var
link() {
    mkdir -p backup
    dotfile="$1"
    if [[ ! -f "$dotfiles/$dotfile" ]]; then
        die "Could not find ${dotfile} in $dotfiles"
    fi
    if [[ -L ~/".${dotfile##*/}" ]]; then
        # Just remove existing symbolic link
        #info "Removing existing symbolic link"
        rm ~/".${dotfile##*/}" || die "Could not remove existing ~/$dotfile"
    else
        # Backup only if the existing file is not a symbolic link
        if [[ -f ~/".${dotfile##*/}" ]]; then
            info "Backing up ~/.${dotfile##*/}"
            mv ~/".${dotfile##*/}" backup || die "Could not backup existing ~/.${dotfile##*/}"
        fi
    fi
    ln -s "$dotfiles/$dotfile" ~/".${dotfile##*/}" || die "Error linking ~/.${dotfile##*/}"
}

prompt_install() {
    echo -n $1
    read answer
    if [[ $answer =~ [yY] ]]; then
        $2
    fi
}

install_vm() {
    # Disable keyboard swapping
    echo > ~/.Xmodmap
}

install_oh_my_zsh() {
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

    # Install chad theme
    if [[ -d ~/.oh-my-zsh/themes ]]; then
        cp $dotfiles/shell/chad.zsh-theme ~/.oh-my-zsh/themes/
    fi

    echo
}

update_vim_plugins() {
    rm -f ~/.vim/autoload/plug.vim
    info "Downloading updated vim-plug"
    curl -sSfLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    vim +PlugUpgrade +PlugInstall +PlugUpdate +qa
}

disable_etc_vimrc() {
    # fixes escape character delay in vim
    sudo mv /etc/vimrc /etc/vimrc.disabled || die "Error disabling system vimrc"
}

install_rst() {
    # This won't be handled above because .rst2pdf and .rst2html are folders
    echo "Installing reStructuredText settings"
    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2pdf
    else
        # This may be a folder we need to backup
        mv ~/.rst2pdf $dotfiles/backup/
    fi
    erun ln -s $dotfiles/.rst2pdf ~/.rst2pdf

    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2html
    else
        # This may be a folder we need to backup
        mv ~/.rst2html $dotfiles/backup/
    fi
    erun ln -s $dotfiles/.rst2html ~/.rst2html
}

install_powerline() {
    if [[ $(uname) == 'Darwin' ]]; then
        font_dir="$HOME/Library/Fonts"
    else
        font_dir="$HOME/.local/share/fonts"
    fi

    mkdir -p $font_dir

    find "$dotfiles/offline/fonts" \( -name '*.[o,t]tf' -or -name '*.pcf.gz' \) -type f -exec cp "{}" "$font_dir/" \; || die "Error installing fonts"

    if hash 2>/dev/null fc-cache; then
        info "Resetting font cache, this may take a moment..."
        fc-cache -f $font_dir
    fi

    info "All Powerline fonts installed to $font_dir"
}

######################## MAIN

cd "${0%/*}"
dotfiles="$(pwd)" # Location of this dotfiles folder

info "Downloading files not tracked in this repo"
cache https://github.com/cskeeters/tabsplice/blob/master/tabsplice

clone https://github.com/chriskempson/base16-shell
clone https://github.com/powerline/fonts

info "Installing settings files"
link shell/fzf.bash
link shell/fzf.zsh
link shell/gshrc
link shell/bashrc
link shell/zshrc
link shell/bash_profile
link shell/bash_prompt
link shell/profile
link shell/completions
link shell/inputrc

link X11/xinitrc
link X11/Xmodmap
link X11/Xresources # xterm/rxvt color settings

link git/gitconfig
link git/gitignore

link hg/hgrc

link vim/gvimrc
link vim/vimrc

link doc/docutils

link ctags
link tmux.conf



install_rst

prompt_install "Is this a virtual machine? (n) ->" install_vm

if [[ $SHELL =~ .*zsh ]]; then
    if [[ ! -d ~/.oh-my-zsh ]]; then
        prompt_install "Install Oh-My-Zsh? ->" install_oh_my_zsh
        # NOTE: oh-my-zsh auto updates
    fi
fi


if [[ $(uname) == Darwin ]]; then
    if [[ -f /etc/vimrc ]]; then
        prompt_install "Disable /etc/vimrc? ->" disable_etc_vimrc
    fi

    echo "Setting up Keyboard bindings to support ^w -> deleteWordBackward:"
    mkdir -p ~/Library/KeyBindings
    cp $dotfiles/DefaultKeyBinding.dict ~/Library/KeyBindings/DefaultKeyBinding.dict

    echo "Setup iterm settings"
    plutil -convert binary1 $dotfiles/iterm2.xml -o ~/Library/Preferences/com.googlecode.iterm2.plist

    # This will safe the iTerm preferences into an XML files
    #   plutil -convert xml1 ~/Library/Preferences/com.googlecode.iterm2.plist -o $dotfiles/iterm2.xml
fi

if [[ $(uname) == Linux ]]; then
    if [[ -f ~/.config/xfce4/terminal/terminalrc ]]; then
        cp ~/.config/xfce4/terminal/terminalrc $dotfiles/backup
    fi
    mkdir -p ~/.config/xfce4/terminal/terminal
    rm -f ~/.config/xfce4/terminal/terminalrc
    ln -sfT $dotfiles/config/terminalrc ~/.config/xfce4/terminal/terminalrc
fi

if hash git 2> /dev/null; then
    prompt_install "Install/Update Vim Plugins (n) ->" update_vim_plugins
fi

if [[ -d $dotfiles/offline/fonts ]]; then
    prompt_install "Install powerline fonts (n) ->" install_powerline
fi
