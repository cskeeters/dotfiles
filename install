#!/bin/bash

# With no options, install will download offline files and install settings
#
# -o Download offline files/repositores only
# -r reinstall offline repositories
# -u Update cloned offline repositories
# -c uninstall links to dotfiles

source log.sh

############ INSTALL FUNCTIONS
erun() {
    all="$@"
    info "Running: $all"
    ${@} || die "Error running ${@}"
}


exists() {
    hash $1 2>/dev/null
}

# cache files not tracked in this repo
cache() {
    mkdir -p offline
    if [[ ! -f "offline/$(basename $1)" ]]; then
        info "Downloading $1..."
        if exists curl; then
            (cd offline && curl -sSfLO "$1" || die "Error downloading $1")
        elif exists wget; then
            (cd offline && wget -nv "$1" || die "Error downloading $1")
        else
            die "curl and wget not installed"
        fi
    fi
}
gitclone() {
    if exists git; then
        (cd offline && git clone --quiet --depth 1 "$1" || die "Error downloading $1")
    else
        die "git not installed"
    fi
}
gitupdate() {
    if exists git; then
        (cd offline/"$1" && git pull || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
hgclone() {
    if exists hg; then
        (cd offline && hg clone "$1" || die "Error downloading $1")
    else
        die "hg not installed"
    fi
}
hgupdate() {
    if exists hg; then
        (cd offline/"$1" && hg pull -u || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
clone() {
    mkdir -p offline
    if [[ ! -e "offline/$(basename $1)" ]]; then
        info "Cloning $1..."
        if [[ $1 =~ github ]]; then
            gitclone "$1"
        elif [[ $1 =~ bitbucket ]]; then
            hgclone "$1"
        else
            die "Don't know how to clone $1"
        fi
    else
        if [[ $UPDATE -eq 1 ]]; then
            info "Updating $1..."
            if [[ $1 =~ github ]]; then
                gitupdate $(basename "$1")
            elif [[ $1 =~ bitbucket ]]; then
                hgupdate $(basename "$1")
            else
                die "Don't know how to update $1"
            fi
        fi
    fi
}

# backup file if exists by moving it out of the way
backup_clear() {
    if [[ -L $INSTALL_PATH ]]; then
        # Just remove existing symbolic link
        #info "Removing existing symbolic link"
        rm "$INSTALL_PATH" || die "Could not remove $INSTALL_PATH"
    else
        # Backup only if the existing file is not a symbolic link
        if [[ -e $INSTALL_PATH ]]; then
            info "Backing up $INSTALL_PATH"
            mv "$INSTALL_PATH" "$dotfiles/backup" || die "Could not backup existing $INSTALL_PATH"
        fi
    fi
}

# Installs a symbolic link pointing to the provided file or folder
# It first runs backup_clear to free the target path for the new symbolic link.
# $1 - The dotfiles sub-path to the source file or folder
# $2 - the target directory, which defaults to $HOME.  Could be $HOME/.config for example
link() {
    INSTALL_DIR="$HOME"
    if [[ "$2" != "" ]]; then
        INSTALL_DIR="$HOME/$2"
    fi

    INSTALL_PATH="$INSTALL_DIR/${DOT}${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    mkdir -p "$INSTALL_DIR"
    backup_clear
    ln -sf "$SOURCE_PATH" "$INSTALL_PATH" || die "Error linking $INSTALL_PATH"
}

linkdot() {
    DOT="." link "$1" "$2"
}

linkbin() {
    mkdir -p "$HOME/bin"
    # Remove everything before last slash
    INSTALL_PATH="${2:-$HOME/bin}/${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    backup_clear
    ln -sf "$SOURCE_PATH" "$INSTALL_PATH" || die "Error linking $INSTALL_PATH"
}

run_all()
{
    if [[ -d "$1" ]]; then
        #-r  raw input - disables interpretion of backslash escapes and line-continuation in the read data
        #-d  <DELIM>   - recognize <DELIM> as data-end, rather than <newline>
        while IFS= read -r -d $'\0' FILE; do
            if [[ -r "$FILE" ]]; then
                # echo "Sourcing $FILE"
                . "$FILE"
            fi
        done < <(find "$1" -type f -print0)
    fi
}

cleanup_link() {
    FILE="$1"
    TARGET=$(readlink -f "$FILE")
    if [[ "$TARGET" =~ dotfiles ]]; then
        echo "Removing $FILE"
        rm -f "$FILE"
    fi
}

# This is used when older config is in place that no longer applies
cleanup_links()
{
    while IFS= read -r -d $'\0' FILE; do
        cleanup_link "$FILE"
    done < <(find "$HOME" -maxdepth 2 -type l -print0)

    while IFS= read -r -d $'\0' FILE; do
        cleanup_link "$FILE"
    done < <(find "$HOME/.config" -type l -print0)
}

######################## MAIN

cd "${0%/*}"
dotfiles="$(pwd)" # Location of this dotfiles folder
mkdir -p "$dotfiles/backup"

DOWNLOAD_ONLY=0
UPDATE=0
while getopts "rouc" opt; do
  case $opt in
    r)
      rm -rf offline
      ;;
    o)
      DOWNLOAD_ONLY=1
      ;;
    u)
      UPDATE=1
      ;;
    c)
      cleanup_links
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

info "Downloading files not tracked in this repo"

cache https://raw.githubusercontent.com/cskeeters/tabsplice/master/tabsplice
chmod a+x offline/tabsplice

cache https://raw.githubusercontent.com/cskeeters/myvim/master/myvim
chmod a+x offline/myvim


clone https://github.com/chriskempson/base16-shell

# Use Nerd Font instead
# clone https://github.com/powerline/fonts

if [[ $DOWNLOAD_ONLY -eq 1 ]]; then
    echo "Finished Downloading.  Exiting"
    exit 0
fi

info "Installing settings files"
linkdot shell/fzf.sh
linkdot shell/bashrc
linkdot shell/bash_profile
linkdot shell/bash_prompt
linkdot shell/completions
linkdot shell/inputrc
linkdot shell/dir_colors
linkdot shell/iterm2_shell_integration.bash

linkdot git/gitconfig
linkdot git/gitignore

linkdot hg/hgrc
linkdot hg/hg_log_style

# If we install both, vim will use vimrc and neovim will use .config/init.lua,
# which doesn't reference vimrc
linkdot vim/gvimrc
linkdot vim/vimrc

link nvim .config
link bfm .config

link bat .config

linkdot alacritty/alacritty.toml

# Helps ctags with markdown
linkdot ctags

linkdot tmux.conf

linkbin offline/tabsplice
linkbin offline/myvim

# nnn
link acrobatpro .config/nnn/plugins
link addjump .config/nnn/plugins
link fzjump .config/nnn/plugins
link fzcd .config/nnn/plugins
link openfolder .config/nnn/plugins
link vim .config/nnn/plugins
link lua .local/share

linkdot hammerspoon

# Run OS specific installation
run_all "$dotfiles/install.d-$(uname)"
# Run host specific installation
run_all "$dotfiles/install.d-$(hostname -s)"
