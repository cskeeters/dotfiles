#!/bin/bash

############ LOG FUNCTIONS
show() {
    if [[ -t 1 ]]; then
        # Coloring is ok
        printf -- "\x1b[$2m$1\x1b[m\n"
    else
        printf -- "$1\n"
    fi
}

error() { show "ERROR: $1" 31; } # 31 is red
warn()  { show "WARN: $1" 33; }  # 33 is yellow
info()  { show "INFO: $1" 34; }  # 34 is blue
# Outputs the first parameter and terminates with exit 1
die() {
    error "$1"
    exit 1
}


############ INSTALL FUNCTIONS
erun() {
    all="$@"
    info "Running: $all"
    ${@} || die "Error running ${@}"
}


exists() {
    hash $1 2>/dev/null
}

# cache files not tracked in this repo
cache() {
    mkdir -p offline
    if [[ ! -f "offline/$(basename $1)" ]]; then
        info "Downloading $1..."
        if exists curl; then
            (cd offline && curl -sSfLO "$1" || die "Error downloading $1")
        elif exists wget; then
            (cd offline && wget -nv "$1" || die "Error downloading $1")
        else
            die "curl and wget not installed"
        fi
    fi
}
gitclone() {
    if exists git; then
        (cd offline && git clone --quiet --depth 1 "$1" || die "Error downloading $1")
    else
        die "git not installed"
    fi
}
gitupdate() {
    if exists git; then
        (cd offline/"$1" && git pull || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
hgclone() {
    if exists hg; then
        (cd offline && hg clone "$1" || die "Error downloading $1")
    else
        die "hg not installed"
    fi
}
hgupdate() {
    if exists hg; then
        (cd offline/"$1" && hg pull -u || die "Error updating $1")
    else
        die "hg not installed"
    fi
}
clone() {
    mkdir -p offline
    if [[ ! -e "offline/$(basename $1)" ]]; then
        info "Cloning $1..."
        if [[ $1 =~ github ]]; then
            gitclone "$1"
        elif [[ $1 =~ bitbucket ]]; then
            hgclone "$1"
        else
            die "Don't know how to clone $1"
        fi
    else
        info "Updating $1..."
        if [[ $1 =~ github ]]; then
            gitupdate $(basename "$1")
        elif [[ $1 =~ bitbucket ]]; then
            hgupdate $(basename "$1")
        else
            die "Don't know how to update $1"
        fi
    fi
}

# backup file if exists by moving it out of the way
backup_clear() {
    if [[ -L $INSTALL_PATH ]]; then
        # Just remove existing symbolic link
        #info "Removing existing symbolic link"
        rm "$INSTALL_PATH" || die "Could not remove $INSTALL_PATH"
    else
        # Backup only if the existing file is not a symbolic link
        if [[ -e $INSTALL_PATH ]]; then
            info "Backing up $INSTALL_PATH"
            mv "$INSTALL_PATH" backup || die "Could not backup existing $INSTALL_PATH"
        fi
    fi
}

link() {
    ln -sf "$SOURCE_PATH" "$INSTALL_PATH" || die "Error linking $INSTALL_PATH"
}

linkdot() {
    # Add the dot and remove everything before last slash (basename)
    INSTALL_PATH="${2:-$HOME}/.${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    backup_clear
    link
}
linkbin() {
    # Remove everything before last slash
    INSTALL_PATH="${2:-$HOME/bin}/${1##*/}"
    SOURCE_PATH="$dotfiles/$1"
    backup_clear
    link
}

prompt_install() {
    echo -n $1
    read answer
    if [[ $answer =~ [yY] ]]; then
        $2
    fi
}

install_vm() {
    # Disable keyboard swapping
    rm -f ~/.Xmodmap
}

update_vim_plugins() {
    rm -f ~/.vim/autoload/plug.vim
    info "Downloading updated vim-plug"
    curl -sSfLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    vim +PlugInstall +PlugUpdate +qa
}

disable_etc_vimrc() {
    # fixes escape character delay in vim
    sudo mv /etc/vimrc /etc/vimrc.disabled || die "Error disabling system vimrc"
}

install_rst() {
    # This won't be handled above because .rst2pdf and .rst2html are folders
    info "Installing reStructuredText settings"
    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2pdf
    else
        # This may be a folder we need to backup
        mv ~/.rst2pdf $dotfiles/backup/
    fi
    erun ln -s $dotfiles/.rst2pdf ~/.rst2pdf

    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2html
    else
        # This may be a folder we need to backup
        mv ~/.rst2html $dotfiles/backup/
    fi
    erun ln -s $dotfiles/.rst2html ~/.rst2html
}

install_powerline() {
    if [[ $(uname) == 'Darwin' ]]; then
        font_dir="$HOME/Library/Fonts"
    else
        font_dir="$HOME/.local/share/fonts"
    fi

    mkdir -p $font_dir

    find "$dotfiles/offline/fonts" \( -name '*.[o,t]tf' -or -name '*.pcf.gz' \) -type f -exec cp "{}" "$font_dir/" \; || die "Error installing fonts"

    if hash 2>/dev/null fc-cache; then
        info "Resetting font cache, this may take a moment..."
        fc-cache -f $font_dir
    fi

    info "All Powerline fonts installed to $font_dir"
}

######################## MAIN

cd "${0%/*}"
dotfiles="$(pwd)" # Location of this dotfiles folder

DOWNLOAD_ONLY=0
UPDATE=0
while getopts ":r:o" opt; do
  case $opt in
    r)
      rm -rf offline
      ;;
    o)
      DOWNLOAD_ONLY=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

info "Downloading files not tracked in this repo"

cache https://raw.githubusercontent.com/cskeeters/tabsplice/master/tabsplice
chmod a+x offline/tabsplice

cache https://raw.githubusercontent.com/junegunn/myvim/master/myvim
chmod a+x offline/myvim


clone https://github.com/robbyrussell/oh-my-zsh

clone http://bitbucket.org/sjl/mercurial-cli-templates/
clone https://github.com/chriskempson/base16-shell
clone https://github.com/powerline/fonts

if [[ $DOWNLOAD_ONLY -eq 1 ]]; then
    exit 0
fi

info "Installing settings files"
linkdot shell/fzf.bash
linkdot shell/fzf.zsh
linkdot shell/gshrc
linkdot shell/bashrc
linkdot shell/zshrc
linkdot shell/bash_profile
linkdot shell/bash_prompt
linkdot shell/profile
linkdot shell/completions
linkdot shell/inputrc

linkdot X11/xinitrc
linkdot X11/Xmodmap
linkdot X11/Xresources # xterm/rxvt color settings

linkdot git/gitconfig
linkdot git/gitignore

linkdot hg/hgrc

linkdot vim/gvimrc
linkdot vim/vimrc

linkdot doc/docutils

linkdot ctags
linkdot tmux.conf

linkbin offline/tabsplice
linkbin offline/myvim

#sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
linkdot offline/oh-my-zsh
linkdot offline/mercurial-cli-templates "$HOME"

install_rst

# Install chad theme, even if oh-my-zsh was already installed
if [[ -d ~/.oh-my-zsh/themes ]]; then
    rm -f ~/.oh-my-zsh/themes/chad.zsh-theme
    ln -sf $dotfiles/shell/chad.zsh-theme ~/.oh-my-zsh/themes/chad.zsh-theme || die "Error installing chad.zsh-theme"
fi


if [[ $(uname) == Darwin ]]; then
    if [[ -f /etc/vimrc ]]; then
        prompt_install "Disable /etc/vimrc? ->" disable_etc_vimrc
    fi

    info "Setting up Keyboard bindings to support ^w -> deleteWordBackward:"
    mkdir -p ~/Library/KeyBindings
    cp $dotfiles/DefaultKeyBinding.dict ~/Library/KeyBindings/DefaultKeyBinding.dict

    info "Setup iterm settings"
    plutil -convert binary1 $dotfiles/iterm2.xml -o ~/Library/Preferences/com.googlecode.iterm2.plist

    # This will safe the iTerm preferences into an XML files
    #   plutil -convert xml1 ~/Library/Preferences/com.googlecode.iterm2.plist -o $dotfiles/iterm2.xml
fi

if [[ $(uname) == Linux ]]; then
    if [[ -f ~/.config/xfce4/terminal/terminalrc ]]; then
        cp ~/.config/xfce4/terminal/terminalrc $dotfiles/backup
    fi
    mkdir -p ~/.config/xfce4/terminal/terminal
    rm -f ~/.config/xfce4/terminal/terminalrc
    ln -sf $dotfiles/config/terminalrc ~/.config/xfce4/terminal/terminalrc
fi

### Optional stuff
prompt_install "Is this a virtual machine? (n) ->" install_vm

if hash git 2> /dev/null; then
    prompt_install "Install/Update Vim Plugins (n) ->" update_vim_plugins
fi

if [[ -d $dotfiles/offline/fonts ]]; then
    prompt_install "Install powerline fonts (n) ->" install_powerline
fi
