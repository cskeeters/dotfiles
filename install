#!/bin/bash

function die()
{
    echo "${@}"
    exit 1
}

function erun()
{
  echo "Running: ${@}"
  ${@} || die "Error running ${@}"
}

cd ~

if [ ! -e dotfiles/backup ]; then
  mkdir dotfiles/backup
fi

for dotfile in `find dotfiles -type f -name ".*" | cut -c10-99`
do
  if [[ "$dotfile" != .hg/* ]]; then
    if [[ "$dotfile" != *backup* ]]; then
      if [ -L $dotfile ]; then
        erun rm $dotfile
      else
        if [ -f $dotfile ]; then
          erun mv $dotfile dotfiles/backup
        fi
      fi
      erun ln -s dotfiles/$dotfile $dotfile
    fi
  fi
done

prompt_install() {
    echo -n $1
    read answer
    if [[ $answer =~ [yY] ]]; then
        $2
    fi
}

install_oh_my_zsh() {
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

    # Install chad theme
    if [[ -d ~/.oh-my-zsh/themes ]]; then
        cp ~/dotfiles/chad.zsh-theme ~/.oh-my-zsh/themes/
    fi

    echo
}

update_vim_plugins() {
    while IFS=$'\n' read url; do
        if [[ $url =~ .*/(.*) ]]; then
            base=${BASH_REMATCH[1]}
            if [[ -e ~/.vim/bundle/$base ]]; then
                echo Updating $url
                git -C ~/.vim/bundle/$base pull
            else
                echo Cloning $url
                ( cd ~/.vim/bundle; git clone $url )
            fi

            # Update helptags for each plugin
            if [[ -e ~/.vim/bundle/$base/doc ]]; then
                vim -e -c "helptags ~/.vim/bundle/$base/doc" -c q
            fi
            echo
        fi
    done < <(sed -ne 's/^" *PLUGIN: \([^ \"]*\)/\1/p' ~/.vimrc | grep github)
}

disable_etc_vimrc() {
    # fixes escape character delay in vim
    erun mv /etc/vimrc /etc/vimrc.disabled
}

install_rst() {
    # This won't be handled above because .rst2pdf and .rst2html are folders
    echo "Installing reStructuredText settings"
    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2pdf
    else
        # This may be a folder we need to backup
        mv ~/.rst2pdf ~/dotfiles/backup/
    fi
    erun ln -s ~/dotfiles/.rst2pdf ~/.rst2pdf

    if [[ -h ~/.rst2pdf ]]; then
        rm -f ~/.rst2html
    else
        # This may be a folder we need to backup
        mv ~/.rst2html ~/dotfiles/backup/
    fi
    erun ln -s ~/dotfiles/.rst2html ~/.rst2html
}

install_rst

if [[ $SHELL =~ .*zsh ]]; then
    if [[ ! -d ~/.oh-my-zsh ]]; then
        prompt_install "Install Oh-My-Zsh? ->" install_oh_my_zsh
        # NOTE: oh-my-zsh auto updates
    fi
fi


if [[ $(uname) == Darwin ]]; then
    if [[ -f /etc/vimrc ]]; then
        prompt_install "Disable /etc/vimrc? ->" disable_etc_vimrc
    fi

    echo "Setting up Keyboard bindings to support ^w -> deleteWordBackward:"
    mkdir -p ~/Library/KeyBindings
    cp ~/dotfiles/DefaultKeyBinding.dict ~/Library/KeyBindings/DefaultKeyBinding.dict

    echo "Setup iterm settings"
    plutil -convert binary1 ~/dotfiles/iterm2.xml -o ~/Library/Preferences/com.googlecode.iterm2.plist

    # This will safe the iTerm preferences into an XML files
    #   plutil -convert xml1 ~/Library/Preferences/com.googlecode.iterm2.plist -o ~/dotfiles/iterm2.xml
fi

if hash git 2> /dev/null; then
    prompt_install "Install/Update Vim Plugins ->" update_vim_plugins
fi
