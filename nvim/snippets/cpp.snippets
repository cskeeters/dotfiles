snippet once
	#pragma once
snippet syslog
	#include <syslog.h>
	openlog(argv[0], LOG_PID | LOG_PERROR | LOG_CONS, LOG_DAEMON);
	syslog(LOG_INFO, "Format String %d", i);
snippet daemon
	#include <unistd.h>
	#include <string.h>
	if ((daemon(0, 0)) < 0) {
	   syslog(LOG_ERR, "Error daemonizing %s", strerror(errno));
	   exit(EXIT_FAILURE);
	}
snippet sleep
	#include <unistd.h>
	unsigned int leftover = sleep(1);
snippet usleep
	#include <unistd.h>
	usleep(20);
snippet err
	#include <errno.h>
	#include <string.h>
	syslog(LOG_INFO, "Error: %s", strerror(errno));
snippet exit
	#include <stdlib.h>
	exit(EXIT_FAILURE);
snippet p
	printf("${1:}\n"${2});
snippet pf
	printf("${1:%s}\n", ${2:var});
snippet sprintf
	char buffer[255];
	sprintf(buffer, "${1:%s}\n", ${2:var});
snippet main
	#include <iostream>
	#include <string>
	#include <vector>
	
	int main(int argc, char *argv[])
	{
		${1}
	}
snippet inc
	#include <${1:string}>
snippet Inc
	#include "${1:string}.h"
snippet cout
	cout << "${1:text}" << endl;
snippet cerr
	cerr << "${1:Error: }${2}" << endl;
snippet vec
	vector<${1:std::string}> ${2:bar};
snippet str
	string ${1}
snippet ts
	to_string(${1})
snippet sp
	shared_ptr<${1}>
snippet ms
	make_shared<${1}>(${2})
snippet log
	#include <UTILS/log.h>
snippet lef
	LOG_ERROR("${1:field}: "<<$1);
snippet ldf
	LOG_DEBUG("${1:field}: "<<$1);
snippet le
	LOG_ERROR("${1}");
snippet lw
	LOG_WARN("${1}");
snippet li
	LOG_INFO("${1}");
snippet ld
	LOG_DEBUG("${1}");
snippet regex Regular Expression (std::regex)
	#include <regex>

	try {
		// Use Raw String (c++11)
		const zip_re pattern(R"zip: (\d{5})");

		// std::smatch is the object that will hold the results of the match
		std::smatch match_results;
		if (std::regex_search("zip: 12345", match_results, pattern)) {

			cout << "Match successful! Captured groups: " << match_results.size() << endl;
			string match = match_results[0];
			string zip = match_results[1];
		} else {
			cout << "No match found." << endl;
		}

	} catch (const std::regex_error& e) {
		std::cerr << "Regex error: " << e.what() << " (Code: " << e.code() << ")" << std::endl;
		return 1;
	}
