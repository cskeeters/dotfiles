snippet main
	package main

	import (
		"fmt"
	)

	func main() {
		fmt.Println("hello world")
	}
snippet f
	import "errors"

	func ${1:name}() (${2:int}, error) {
		${3:body}
		return 1, errors.New("${4:Error message}")
	}
snippet en
	return errors.New("${1:Error message}")
snippet logf
	log.Printf("${1:field}: %d", ${1})
snippet log
	log.Printf("${1:here}")
snippet err
	if err != nil {
		log.Fatal(err)
	}
snippet append
	append(${1:slice}, ${2:value})
snippet print
	fmt.Printf("${1:field}: %d\n", ${1})
snippet sprint
	${2:str} := fmt.Sprintf("${1:field}: %d\n", ${1})
snippet slice
	// slices point to backing array, but data is copied into slice
	s := []int{}
	append(slice, value)
	len(s)
snippet channel
	func f(exit <-chan bool, exited chan<- bool)
	// Channels are reference types
	done := make(chan bool)
	done <- false
	_ = <-done
snippet string_builder
	sb := strings.Builder{}
	sb.WriteString("")
	str := sb.String()
snippet sleep
	time.Sleep(0.8 * time.Second)
