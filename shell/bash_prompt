#!/bin/bash

if [[ !$TMPDIR ]]; then
    if [[ $XDG_RUNTIME_DIR ]]; then
        TMPDIR="$XDG_RUNTIME_DIR"
    else
        TMPDIR=/tmp
    fi
fi

export fg_col="\001\033[38;05;%sm\002%s\001\033[0m\002"

color() {
    TXT=$2
    if [[ $TXT =~ ^$HOME(.*) ]]; then
        TXT=~${BASH_REMATCH[1]}
    fi
    printf $fg_col "$1" "$TXT"
}
export -f color

set_hg_vars() {
    HG_BRANCH=$(hg branch 2> /dev/null)
    if [[ $HG_BRANCH != "" ]]; then
        # hg par is fast, id is slow over nfs
        HG_REV=$(hg par --template '{rev},')
        [[ $HG_REV =~ ([[:digit:]]+),([[:digit:]]+), ]] && HG_REV=${BASH_REMATCH[1]},${BASH_REMATCH[2]}
        [[ $HG_REV =~ ([[:digit:]]+),$ ]] && HG_REV=${BASH_REMATCH[1]}

        HG_LATEST=0 # not checked, file system too slow

        HG_DIRTY=0
        HG_NEWFILE=0
        HG_DELETED=0
        HG_UNTRACKED=0

        # If the current directory is on an nfs mount, don't run hg sta, or hg id, too slow
        if [[ ! $(df -PT . | sed -n 2p | awk '{ print $2 }') =~ nfs ]]; then
            HG_LATEST=1 # Clean
            if [[ $REV != -1 ]]; then
                # If no commits id -n returns -1, but this outputs an error
                HG_BRANCH_REV=$(hg identify -nr $(hg identify -b) 2> /dev/null)
            fi

            # Red, not on latest revision for branch
            [[ $HG_REV == $HG_BRANCH_REV ]] || HG_LATEST=2 # On Old Rev

            parse_hg_status
        fi

    fi
}
export -f set_hg_vars

# get current status of hg repo
parse_hg_status() {
    hg status 2>&1 > $TMPDIR/prompt-$$
    while IFS= read -r -d $'\n' line; do
        [[ $line =~ ^M ]] && HG_DIRTY=1
        [[ $line =~ ^A ]] && HG_NEWFILE=1
        [[ $line =~ ^R ]] && HG_DELETED=1
        [[ $line =~ ^\? ]] && HG_UNTRACKED=1
    done < $TMPDIR/prompt-$$
    rm -f $TMPDIR/prompt-$$
}
export -f parse_hg_status

# get current branch in git repo
set_git_vars() {
    GIT_BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "$GIT_BRANCH" == "" ]; then

        GIT_MODIFIED=0
        GIT_UNTRACKED=0
        GIT_AHEAD=0
        GIT_NEWFILE=0
        GIT_RENAMED=0
        GIT_DELETED=0

        git status 2>&1 > $TMPDIR/prompt-$$
        # cat $TMPDIR/prompt-$$
        while IFS= read -r -d $'\n' line; do
            [[ $line =~ modified: ]] && GIT_MODIFIED=1
            [[ $line =~ Untracked\ files ]] && GIT_UNTRACKED=1
            [[ $line =~ Your\ branch\ is\ ahead\ of ]] && GIT_AHEAD=1
            [[ $line =~ new\ file: ]] && GIT_NEWFILE=1
            [[ $line =~ renamed: ]] && GIT_RENAMED=1
            [[ $line =~ deleted: ]] && GIT_DELETED=1
        done < $TMPDIR/prompt-$$
        rm -f $TMPDIR/prompt-$$

        GIT_WF=0
        [[ $GIT_INDICATORS != "" ]] && GIT_WF=1
    fi
}
export -f set_git_vars


declare -i LAST_RUN
export LAST_RUN

declare LAST_WD
export LAST_WD

__run_slow() {
    # Has not run yet
    [[ -z $LAST_RUN ]] && return 0
    [[ -z $LAST_WD ]] && return 0

    # In new directory
    [[ $PWD != $LAST_WD ]] && return 0

    # more than N second has elapsed
    ((ELAPSED=$(date +%s) - $LAST_RUN))
    [[ ! $ELAPSED -lt 2 ]] && return 0

    # Don't think it's possible to see if the last command run was hg ci or git ci
    # fc -ln -1 doesn't yet have the right command

    return 1 # Don't run slow
}
export -f __run_slow

set_hg_colors() {
    HG_BRANCH_COLOR=7 # White means no status checked
    [[ $HG_LATEST == 1 ]] && HG_BRANCH_COLOR=5
    [[ $HG_LATEST == 2 ]] && HG_BRANCH_COLOR=1

    if [[ $HG_LATEST == 0 ]]; then
        HG_WF_COLOR=7 # White means no status checked
    else
        HG_WF_COLOR=5 # White means no status checked
        (($HG_UNTRACKED)) && HG_WF_COLOR=3 # untracked files present
        (($HG_DIRTY)) || (($HG_NEWFILE)) || (($HG_DELETED)) && HG_WF_COLOR=1 # Red == Dirty
    fi
}
export -f set_hg_colors

set_git_colors() {
    GIT_WF_COLOR=5
    [[ $GIT_UNTRACKED == 1 ]] && GIT_WF_COLOR=3
    [[ $GIT_AHEAD == 1 ]] && GIT_WF_COLOR=3
    [[ $GIT_NEWFILE == 1 ]] && GIT_WF_COLOR=1
    [[ $GIT_RENAMED == 1 ]] && GIT_WF_COLOR=1
    [[ $GIT_DELETED == 1 ]] && GIT_WF_COLOR=1
    [[ $GIT_MODIFIED == 1 ]] && GIT_WF_COLOR=1
}
export -f set_git_colors

__prompt_cmd() {
    RET=$?
    STATUS=""
    [[ $RET != 0 ]] && STATUS="$(color 1 "$RET") "
    # STATUS=$'\001'$(tput bold)$(tput setaf $STATUS_COLOR)$'\002'$RET$'\001'$(tput sgr0)$'\002'

    if __run_slow; then
        # echo "Updating Prompt"

        ############### Mercurial
        set_hg_vars
        set_hg_colors

        if [[ $HG_BRANCH ]]; then
            # Add trailing slash
            HG_STATUS="$(color $HG_BRANCH_COLOR "$HG_BRANCH"):$(color $HG_WF_COLOR "$HG_REV") "
        else
            HG_STATUS=""
        fi

        ############### GIT
        set_git_vars
        set_git_colors

        if [[ $GIT_BRANCH ]]; then
            # Add trailing slash
            GIT_STATUS="$(color $GIT_WF_COLOR "$GIT_BRANCH") "
        else
            GIT_STATUS=""
        fi

        SCM_STATUS="$HG_STATUS$GIT_STATUS"

        LAST_RUN="$(date +%s)"
        LAST_WD="$PWD"
    fi

}
export -f __prompt_cmd

export PROMPT_COMMAND=__prompt_cmd

# User according to whoami (with out \u JDK-6555979)
# Use printf since functions don't export when su(do)ing, but variables (fg_col) will
# If su(do)ing, STATUS and SCM_STATUS will not update
# Functions are exported so that way they will things will function when running sh/git/vim
PS1='$STATUS$(printf $fg_col 5 $(whoami))@$(printf $fg_col 3 \h) '
PS1+='$(printf $fg_col 6 \W) '
PS1+='$SCM_STATUS'
