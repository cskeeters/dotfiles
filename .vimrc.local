set shiftwidth=2 tabstop=2 softtabstop=2
"set shiftwidth=4 tabstop=4 softtabstop=4
set wildignore=tags,a.out,depmod,*.so,*.a,*.o,*.d,*.class,*.pyc
noremap <leader>k :make -j4 \| cwindow<CR>

" convert signature to method in cpp
" Class name needs to be saved in c register
let @m = "^d0W\"cPa::f;xi{}j"
let @s = "^Wf:dwdF i A;0j"

"Make underlines for headings in reStructuredText format
let @y = "yypv$r=ji"
let @u = "yypv$r-ji"
let @i = "yypv$r^ji"
let @o = "yypv$r~ji"

set formatprg=par\ -jw60 " gqG
":.!par -jw80

" Hex and Dec line transformations
nmap gd :.,.!xargs -I {} -n1 bash -c "echo 'ibase=16; {}' \| bc"
nmap gh :.,.!xargs -I {} -n1 bash -c "echo 'obase=16; {}' \| bc"
vmap gd :!xargs -I {} -n1 bash -c "echo 'ibase=16; {}' \| bc"gv
vmap gh :!xargs -I {} -n1 bash -c "echo 'obase=16; {}' \| bc"gv

" handles 0x
nmap gxd :.,.!xargs -I {} -n1 bash -c "echo {} \| python -i 2>&1 \| sed -nE 's/>>> (.+)/\1/p'"
nmap gxh :.,.!xargs -I {} -n1 bash -c "echo '\"0x\%02X\" \% {}' \| python -i 2>&1 \| sed -nE \"s/>>> '(.+)'/\1/p\""
vmap gxd :!xargs -I {} -n1 bash -c "echo {} \| python -i 2>&1 \| sed -nE 's/>>> (.+)/\1/p'"gv
vmap gxh :!xargs -I {} -n1 bash -c "echo '\"0x\%02X\" \% {}' \| python -i 2>&1 \| sed -nE \"s/>>> '(.+)'/\1/p\""gv

" Changes single word to hex or dec
let @h = 'yiwmwjkpgxhD"0dd`wviwpb'
let @d = 'yiwmwjkpgxdD"0dd`wviwpb'

" vi-compatible sentences have two spaces after them.
set cpo+=J

vno v <esc>

imap <S-Insert> <MiddleMouse>

autocmd BufNewFile,BufRead *.cpp set formatprg=astyle\ -s4pb
autocmd BufNewFile,BufRead *.sr setfiletype sr
autocmd BufNewFile,BufRead *.sr setfiletype sr
autocmd BufEnter * call FixKeys()
function! FixKeys()
  if expand("%") == ""
    " Allows enter to work with quickfix
    "echom "unmapping"
    silent! nunmap <enter>
  else
    "echom "mapping"
    nnoremap <enter> <S-o><esc>j
  endif
endfunction

let g:syntastic_cpp_compiler_options = ' -std=c++11 -D_GLIBCXX_USE_NANOSLEEP'
let g:syntastic_cpp_compiler_options .= ' `pkg-config --cflags --libs cairo'
let g:syntastic_cpp_compiler_options .= ' `pkg-config --cflags --libs cairomm-1.0'

"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

let g:UltiSnipsSnippetsDir = "~/.vim/bundle/vim-snippets/UltiSnips"
if has("gui_macvim")
  let g:UltiSnipsJumpForwardTrigger="<d-j>"
  let g:UltiSnipsJumpBackwardTrigger="<d-k>"
  "let g:UltiSnipsExpandTrigger="<tab>"
  "let g:UltiSnipsJumpForwardTrigger="<tab>"
  "let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

noremap! <c-space> <C-p>
nnoremap <leader>W :set wrap<cr>:set linebreak<cr>:set nolist<cr>
nnoremap <leader>nW :set nowrap<cr>
nnoremap <leader>5 :update<cr>:!asciidoc -b html5 -a icons -a toc2 -a theme=flask '%'<cr>

nnoremap <leader>d "_d
nnoremap <Leader>h :noh<CR>

nmap <C-PageDown> :bn<CR>
nmap <C-PageUp> :bp<CR>
nmap <C-j> :bn<CR>
nmap <C-k> :bp<CR>
nnoremap gb ^
nnoremap ge $
nnoremap <S-j> <C-e>
nnoremap <S-k> <C-y>
nnoremap <Leader>d istd::<ESC>
nnoremap <Leader>a :A<CR>
nnoremap <Leader>mw :bd!<CR>
nnoremap <Leader>w :bd<CR>
inoremap <C-s> <ESC>:w<CR>
nnoremap <C-s> :w<CR>
nnoremap <leader>r :RainbowParenthesesToggle<cr>
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>el :e $MYVIMRC.local<cr>
nnoremap <leader>eb :e $MYVIMRC.bundles<cr>
nnoremap <leader>sv :source $MYVIMRC.local<cr>

" markdown bold and italic
map <leader>mb ysiw*lysiw*
map <leader>mi ysiw*

let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1

iab teh the
iab adn and
iab waht what
iab tehn then
iab @@ goobsoft@gmail.com
iab ccopy Copyright 2013 Chad Skeeters, all rights reserved.

iab AlP ABCDEFGHIJKLMNOPQRSTUVWXYZ
iab MoN January February March April May June July August September October November December
iab MoO Jan Feb Mar Apr May Jun Jul Aug Sep Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
iab NuM 12345678901234567890123456789012345678901234567890123456789012345678901234567890 
iab RuL ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0
iab <expr> dts strftime("%FT%T%z")
